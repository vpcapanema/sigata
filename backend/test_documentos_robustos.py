"""
Teste do Sistema SIGATA com documentos mais robustos
Para ativar o modo avan√ßado com dados suficientes
"""

import sys
import os

# Adicionar o caminho dos servi√ßos
sys.path.append(os.path.join(os.path.dirname(__file__), 'src/services'))

def test_com_mais_documentos():
    """Testa com documentos mais robustos para ativar modo avan√ßado"""
    print("üß™ Testando SIGATA com documentos robustos...")
    
    try:
        from nlpHybridService import analyze_meeting_minutes
        
        # Documentos mais extensos e variados
        documentos_robustos = [
            """
            Reuni√£o sobre implementa√ß√£o do sistema SIGATA realizada em 13 de julho de 2025.
            Participaram representantes da equipe t√©cnica, ger√™ncia de projeto e stakeholders.
            Foram discutidas as funcionalidades de an√°lise de documentos, processamento de linguagem natural,
            integra√ß√£o com banco de dados PostgreSQL e desenvolvimento da interface de usu√°rio.
            A equipe definiu que utilizar√° tecnologias como BERTopic para modelagem de t√≥picos,
            KeyBERT para extra√ß√£o de palavras-chave e transformers para an√°lise sem√¢ntica.
            Pr√≥ximos passos incluem finaliza√ß√£o da arquitetura e in√≠cio dos testes de integra√ß√£o.
            """,
            
            """
            An√°lise de or√ßamento para o projeto PLI - Processamento de Linguagem e Intelig√™ncia.
            Foram aprovados investimentos em infraestrutura de servidores, licen√ßas de software,
            treinamento da equipe t√©cnica em tecnologias de IA e contrata√ß√£o de consultores especializados.
            O or√ßamento total aprovado √© de R$ 850.000 para o per√≠odo de 12 meses.
            Principais itens: hardware (R$ 200.000), software (R$ 150.000), recursos humanos (R$ 400.000),
            treinamento (R$ 100.000). A libera√ß√£o dos recursos seguir√° cronograma por marcos do projeto.
            """,
            
            """
            Revis√£o de cronograma e marcos do projeto SIGATA - Sistema Integrado de Gest√£o de Atas.
            Foram definidas as seguintes datas: m√≥dulo de NLP (31/08/2025), interface web (30/09/2025),
            integra√ß√£o com banco de dados (15/10/2025), testes de homologa√ß√£o (30/11/2025),
            deploy em produ√ß√£o (15/12/2025). A equipe identificou riscos relacionados √† complexidade
            dos algoritmos de machine learning e depend√™ncias de bibliotecas externas.
            Planos de conting√™ncia incluem desenvolvimento de fallbacks e versionamento incremental.
            """,
            
            """
            Apresenta√ß√£o dos resultados da fase de prototipagem do sistema de an√°lise de atas.
            O prot√≥tipo demonstrou capacidade de processar documentos em formato PDF e DOCX,
            extrair texto automaticamente, identificar participantes das reuni√µes,
            reconhecer t√≥picos principais atrav√©s de algoritmos de clustering,
            gerar resumos executivos e produzir relat√≥rios em HTML.
            M√©tricas de performance: precis√£o de 87% na extra√ß√£o de t√≥picos,
            recall de 82% na identifica√ß√£o de palavras-chave, tempo m√©dio de processamento
            de 3.2 segundos por documento. Feedback dos usu√°rios foi positivo.
            """,
            
            """
            Reuni√£o de planejamento t√©cnico para integra√ß√£o de m√≥dulos do sistema SIGATA.
            Discutidas arquiteturas de microservi√ßos, APIs RESTful, autentica√ß√£o JWT,
            banco de dados PostgreSQL com schema otimizado para documentos textuais,
            cache Redis para melhorar performance de consultas frequentes,
            monitoramento com Prometheus e Grafana, logs centralizados com ELK Stack.
            Decis√µes t√©cnicas: usar Node.js com TypeScript no backend,
            React com Material-UI no frontend, Docker para containeriza√ß√£o,
            Kubernetes para orquestra√ß√£o em ambiente de produ√ß√£o.
            """,
            
            """
            Workshop sobre t√©cnicas avan√ßadas de processamento de linguagem natural.
            Conte√∫do abordado: transformers e arquitetura attention, modelos BERT e suas varia√ß√µes,
            fine-tuning para tarefas espec√≠ficas em portugu√™s brasileiro,
            t√©cnicas de pr√©-processamento de texto, tokeniza√ß√£o, embedding de palavras,
            algoritmos de clustering como HDBSCAN e UMAP para redu√ß√£o dimensional,
            m√©tricas de avalia√ß√£o como BLEU, ROUGE e BERTScore,
            aplica√ß√µes pr√°ticas em an√°lise de sentimento, sumariza√ß√£o autom√°tica,
            classifica√ß√£o de documentos e extra√ß√£o de entidades nomeadas.
            """
        ]
        
        titulos = [
            "Reuni√£o SIGATA - Implementa√ß√£o T√©cnica",
            "An√°lise Or√ßament√°ria PLI 2025",
            "Revis√£o Cronograma e Marcos",
            "Apresenta√ß√£o Resultados Prototipagem", 
            "Planejamento Integra√ß√£o M√≥dulos",
            "Workshop NLP Avan√ßado"
        ]
        
        print(f"üìÑ Processando {len(documentos_robustos)} documentos robustos...")
        
        # Executar an√°lise
        resultado = analyze_meeting_minutes(documentos_robustos, titulos)
        
        print(f"\nüéØ RESULTADO DA AN√ÅLISE:")
        print(f"‚úÖ M√©todo usado: {resultado['method'].upper()}")
        print(f"‚úÖ T√≥picos identificados: {len(resultado['topics'])}")
        print(f"‚úÖ Tecnologia: {resultado['metadata']['technology']}")
        
        # Mostrar detalhes dos t√≥picos
        print(f"\nüìä T√ìPICOS IDENTIFICADOS:")
        for i, topico in enumerate(resultado['topics'], 1):
            print(f"\n{i}. {topico['topic_label']}")
            print(f"   üìã Documentos: {topico['document_count']}")
            print(f"   üîë Palavras-chave: {[kw['term'] for kw in topico['keywords'][:5]]}")
            print(f"   üìà Qualidade: {topico['metrics']['quality_grade']}")
            
        # Verificar se ativou modo avan√ßado
        if resultado['method'] == 'advanced':
            print(f"\nüöÄ MODO AVAN√áADO ATIVADO!")
            print(f"‚úÖ BERTopic funcionando")
            print(f"‚úÖ KeyBERT ativo")
            print(f"‚úÖ M√©tricas avan√ßadas calculadas")
        else:
            print(f"\nüîß Modo fallback utilizado")
            print(f"‚ÑπÔ∏è Pode ser devido ao tamanho dos documentos ou configura√ß√£o")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üéØ SIGATA - Teste com Documentos Robustos")
    print("=" * 50)
    
    success = test_com_mais_documentos()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ TESTE CONCLU√çDO!")
        print("üìà Sistema h√≠brido validado com dados robustos")
    else:
        print("‚ùå Teste falhou - verificar logs acima")
        
    print("üéØ PLI/SP - Sistema SIGATA Operacional")
