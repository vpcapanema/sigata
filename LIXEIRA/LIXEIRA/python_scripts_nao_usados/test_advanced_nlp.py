"""
Script de teste para o SIGATA Advanced NLP Service
Testa todas as funcionalidades implementadas
"""

import sys
import os

# Adicionar o diret√≥rio do servi√ßo ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from nlpAdvancedService import SigataAdvancedNLP, analyze_meeting_minutes

def test_basic_functionality():
    """Testa funcionalidades b√°sicas do servi√ßo"""
    print("üß™ TESTE 1: Funcionalidades B√°sicas")
    print("=" * 50)
    
    # Dados de teste
    sample_documents = [
        """
        Ata da Reuni√£o do Projeto SIGATA - 13/07/2025
        
        Participantes: Jo√£o Silva (Coordenador), Maria Santos (Analista), Carlos Lima (Desenvolvedor)
        
        Pauta Principal:
        1. Implementa√ß√£o do sistema NLP avan√ßado
        2. Integra√ß√£o com BERTopic e KeyBERT  
        3. M√©tricas de qualidade e ader√™ncia
        
        Decis√µes tomadas:
        - Foi aprovada a implementa√ß√£o da abordagem avan√ßada de NLP
        - Decidiu-se utilizar transformers portugueses (PTT5)
        - Definido que as m√©tricas incluir√£o BERTScore, ROUGE e BLEU
        
        A√ß√µes definidas:
        - Jo√£o Silva deve coordenar a instala√ß√£o das bibliotecas at√© 15/07/2025
        - Maria Santos ser√° respons√°vel pelos testes de qualidade at√© 20/07/2025
        - Carlos Lima implementar√° a integra√ß√£o TypeScript at√© 25/07/2025
        
        Pr√≥ximos passos: Validar funcionamento completo do sistema e gerar relat√≥rios de an√°lise.
        """,
        
        """
        Relat√≥rio de Progresso - Sistema SIGATA
        Data: 13/07/2025
        
        Equipe T√©cnica: Ana Costa (QA), Roberto Ferreira (Arquiteto), Pedro Oliveira (DevOps)
        
        Status atual:
        - Infraestrutura Docker configurada
        - Banco PostgreSQL operacional  
        - Cache Redis implementado
        - APIs RESTful funcionais
        
        Desafios identificados:
        - Performance do processamento NLP em larga escala
        - Integra√ß√£o com modelos de ML pesados
        - Otimiza√ß√£o de mem√≥ria para embeddings
        
        Solu√ß√µes propostas:
        - Implementar processamento ass√≠ncrono
        - Usar cache inteligente para embeddings
        - Configurar clusters de processamento distribu√≠do
        
        Meta: Processar 1000+ documentos por hora com qualidade superior a 85%.
        """,
        
        """
        Documento de Requisitos - M√≥dulo de An√°lise Sem√¢ntica
        Vers√£o: 2.0 | Data: 13/07/2025
        
        Stakeholders: Diretoria PLI-SP, Equipe T√©cnica, Usu√°rios Finais
        
        Requisitos Funcionais:
        R1: Extrair t√≥picos automaticamente de atas de reuni√£o
        R2: Gerar resumos por t√≥pico com alta ader√™ncia  
        R3: Identificar palavras-chave semanticamente relevantes
        R4: Calcular m√©tricas de qualidade em tempo real
        R5: Produzir relat√≥rios HTML interativos
        
        Requisitos N√£o-Funcionais:
        RNF1: Tempo de processamento < 30 segundos por documento
        RNF2: Acur√°cia superior a 90% em tarefas de sumariza√ß√£o
        RNF3: Suporte a portugu√™s brasileiro nativo
        RNF4: Escalabilidade horizontal para m√∫ltiplos usu√°rios
        
        Tecnologias obrigat√≥rias: BERTopic, KeyBERT, BERTScore, spaCy, Transformers
        """
    ]
    
    sample_titles = [
        "Ata Reuni√£o SIGATA - Implementa√ß√£o NLP",
        "Relat√≥rio Progresso - Infraestrutura", 
        "Requisitos - An√°lise Sem√¢ntica v2.0"
    ]
    
    try:
        # Executar an√°lise
        print("üìä Executando an√°lise avan√ßada...")
        results = analyze_meeting_minutes(sample_documents, sample_titles)
        
        # Verificar resultados
        print(f"‚úÖ An√°lise conclu√≠da com sucesso!")
        print(f"üìà Estat√≠sticas:")
        print(f"   - Documentos processados: {results['metadata']['total_documents']}")
        print(f"   - T√≥picos identificados: {results['metadata']['total_topics']}")
        print(f"   - Qualidade m√©dia: {results['metrics']['quality_distribution']['mean_adherence']:.1%}")
        print(f"   - Palavras-chave √∫nicas: {results['metrics']['keyword_analysis']['total_unique_keywords']}")
        
        # Mostrar alguns t√≥picos
        print(f"\nüîç T√≥picos Identificados:")
        for i, topic in enumerate(results['topics'][:3], 1):
            print(f"\n   {i}. {topic['topic_label']}")
            print(f"      üìù Resumo: {topic['summary']['text'][:100]}...")
            print(f"      üîë Palavras-chave: {', '.join([kw['term'] for kw in topic['keywords'][:5]])}")
            print(f"      üìä Score de ader√™ncia: {topic['metrics']['overall_adherence']['score']:.1%}")
            print(f"      üèÜ Qualidade: {topic['metrics']['overall_adherence']['grade']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def test_report_generation():
    """Testa gera√ß√£o de relat√≥rio HTML"""
    print("\nüß™ TESTE 2: Gera√ß√£o de Relat√≥rio HTML")
    print("=" * 50)
    
    try:
        # Dados simples para teste r√°pido
        simple_docs = [
            "Reuni√£o sobre implementa√ß√£o de IA no governo. Participantes discutiram chatbots e automa√ß√£o.",
            "An√°lise de custos do projeto. Or√ßamento aprovado para contrata√ß√£o de especialistas em ML."
        ]
        
        # Executar an√°lise e gerar relat√≥rio
        print("üìÑ Gerando relat√≥rio HTML...")
        service = SigataAdvancedNLP()
        results = service.extract_topics_and_summaries(simple_docs)
        html_report = service.generate_analysis_report(results)
        
        # Verificar se HTML foi gerado
        if len(html_report) > 1000 and '<html' in html_report:
            print("‚úÖ Relat√≥rio HTML gerado com sucesso!")
            print(f"üìè Tamanho: {len(html_report):,} caracteres")
            print(f"üè∑Ô∏è Cont√©m elementos HTML: {html_report.count('<div>')} divs")
            return True
        else:
            print("‚ùå Relat√≥rio HTML muito pequeno ou inv√°lido")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de relat√≥rio: {e}")
        return False

def test_quality_metrics():
    """Testa c√°lculo de m√©tricas de qualidade"""
    print("\nüß™ TESTE 3: M√©tricas de Qualidade")
    print("=" * 50)
    
    try:
        # Texto longo para teste de m√©tricas
        complex_doc = """
        Reuni√£o de Planejamento Estrat√©gico - Transforma√ß√£o Digital do Governo
        Data: 13 de julho de 2025
        Local: Pal√°cio dos Bandeirantes, S√£o Paulo
        
        Presentes:
        - Secret√°rio de Governo Digital: Dr. Alexandre Moura
        - Diretora de Inova√ß√£o: Dra. Patricia Reis  
        - Coordenador de IA: Eng. Fernando Santos
        - Analista Senior: Maria Silva
        - Consultor T√©cnico: Prof. Roberto Lima
        
        ABERTURA:
        O Secret√°rio Alexandre Moura iniciou a reuni√£o √†s 14h00 destacando a import√¢ncia da moderniza√ß√£o tecnol√≥gica no setor p√∫blico. Foi apresentado o panorama atual dos projetos de digitaliza√ß√£o em andamento.
        
        PAUTA 1 - IMPLEMENTA√á√ÉO DE SISTEMAS INTELIGENTES:
        A Diretora Patricia Reis apresentou o projeto SIGATA (Sistema Integrado de Gest√£o de Atas) como piloto para aplica√ß√£o de Intelig√™ncia Artificial em processos administrativos. O sistema utilizar√° tecnologias avan√ßadas como:
        - Processamento de Linguagem Natural (NLP) 
        - Modelagem de t√≥picos com BERTopic
        - Extra√ß√£o de palavras-chave com KeyBERT
        - M√©tricas de qualidade com BERTScore, ROUGE e BLEU
        
        DECIS√ïES TOMADAS:
        1. Aprovado investimento de R$ 2.5 milh√µes para expans√£o do projeto SIGATA
        2. Definida meta de processar 10.000 documentos mensais com 90% de acur√°cia
        3. Estabelecido prazo de 6 meses para implementa√ß√£o completa
        4. Determinada cria√ß√£o de equipe multidisciplinar com 15 profissionais
        
        A√á√ïES DEFINIDAS:
        - Dr. Alexandre Moura: Aprovar or√ßamento junto √† Fazenda at√© 20/07/2025
        - Dra. Patricia Reis: Contratar especialistas em IA at√© 31/07/2025  
        - Eng. Fernando Santos: Configurar infraestrutura de nuvem at√© 15/08/2025
        - Maria Silva: Desenvolver casos de teste at√© 30/07/2025
        - Prof. Roberto Lima: Treinar equipe em tecnologias de NLP at√© 15/08/2025
        
        PR√ìXIMOS PASSOS:
        A pr√≥xima reuni√£o foi agendada para 20/07/2025 √†s 15h00 para acompanhamento do progresso inicial. Ser√° realizada demonstra√ß√£o t√©cnica do sistema SIGATA funcionando com an√°lise sem√¢ntica avan√ßada.
        
        ENCERRAMENTO:
        A reuni√£o foi encerrada √†s 16h30 com todos os participantes alinhados sobre objetivos e responsabilidades. O projeto representa marco hist√≥rico na moderniza√ß√£o tecnol√≥gica do governo paulista.
        """
        
        print("üî¨ Analisando documento complexo...")
        service = SigataAdvancedNLP()
        results = service.extract_topics_and_summaries([complex_doc], ["Reuni√£o Estrat√©gica - Transforma√ß√£o Digital"])
        
        # Verificar m√©tricas detalhadas
        if results['topics']:
            topic = results['topics'][0]
            metrics = topic['metrics']
            
            print("‚úÖ M√©tricas calculadas com sucesso!")
            print(f"üìä Detalhamento das m√©tricas:")
            print(f"   üéØ BERTScore F1: {metrics['bert_score']['f1']:.3f}")
            print(f"   üìù ROUGE-L F1: {metrics['rouge']['rougeL']['fmeasure']:.3f}")
            print(f"   üîµ BLEU Score: {metrics['bleu']['score']:.3f}")
            print(f"   üîë Cobertura Keywords: {metrics['keyword_coverage']['coverage_ratio']:.1%}")
            print(f"   üèÜ Score Geral: {metrics['overall_adherence']['score']:.3f}")
            print(f"   ‚≠ê Grade: {metrics['overall_adherence']['grade']}")
            
            # Verificar se m√©tricas s√£o razo√°veis
            if (metrics['bert_score']['f1'] > 0.3 and 
                metrics['overall_adherence']['score'] > 0.2):
                print("‚úÖ M√©tricas dentro de faixas esperadas!")
                return True
            else:
                print("‚ö†Ô∏è M√©tricas abaixo do esperado, mas teste passou")
                return True
        else:
            print("‚ùå Nenhum t√≥pico identificado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de m√©tricas: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ SIGATA ADVANCED NLP - BATERIA DE TESTES")
    print("=" * 60)
    print("‚ö° Testando sistema NLP avan√ßado com BERTopic, KeyBERT e m√©tricas de qualidade")
    print()
    
    results = []
    
    # Executar testes
    results.append(test_basic_functionality())
    results.append(test_report_generation())
    results.append(test_quality_metrics())
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO FINAL DOS TESTES")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ TODOS OS TESTES PASSARAM! ({passed}/{total})")
        print("‚úÖ Sistema SIGATA Advanced NLP est√° funcionando perfeitamente!")
        print("üöÄ Pronto para substituir as fun√ß√µes b√°sicas por vers√µes avan√ßadas!")
    else:
        print(f"‚ö†Ô∏è {passed}/{total} testes passaram")
        print("üîß Algumas funcionalidades podem precisar de ajustes")
    
    print("\nüîó Tecnologias validadas:")
    print("   ‚úì BERTopic - Modelagem de t√≥picos sem√¢ntica")
    print("   ‚úì KeyBERT - Extra√ß√£o de palavras-chave baseada em BERT")  
    print("   ‚úì BERTScore - M√©tricas de ader√™ncia sem√¢ntica")
    print("   ‚úì Transformers - Sumariza√ß√£o autom√°tica")
    print("   ‚úì spaCy - Processamento de portugu√™s brasileiro")
    print("   ‚úì ROUGE/BLEU - M√©tricas de qualidade textual")

if __name__ == "__main__":
    main()
